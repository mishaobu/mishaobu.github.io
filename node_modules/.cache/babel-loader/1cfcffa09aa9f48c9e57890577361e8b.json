{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\flast\\\\OneDrive\\\\Desktop\\\\mishaobu com\\\\mishaobu.github.io\\\\src\\\\components\\\\MovieBlock.js\";\nimport React, { Component } from 'react';\nimport Lightbox from 'react-image-lightbox';\nimport 'react-image-lightbox/style.css';\nimport config from \"../config\";\n\nconst firebase = require(\"firebase\");\n\nexport default class MovieBlock extends Component {\n  constructor(props) {\n    super(props);\n    this.handleDeleteClick = this.handleDeleteClick.bind(this);\n    this.state = {\n      data: [],\n      isOpen: false,\n      toolbarButtons: [/*#__PURE__*/React.createElement(\"button\", {\n        onClick: this.handleDeleteClick,\n        type: \"button\",\n        value: \"delete\",\n        className: \"deleteMovieButton\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 28\n        }\n      }, \" Delete Movie \")]\n    };\n  }\n\n  componentDidMount() {\n    document.getElementsByClassName('deleteMovieButton').onclick = function () {\n      alert(1);\n    };\n\n    if (!firebase.apps.length) {\n      firebase.initializeApp(config);\n    }\n\n    for (let item in this.props.lists) {\n      if (!this.props.json.lists.includes(item)) {\n        this.state.toolbarButtons.push( /*#__PURE__*/React.createElement(\"button\", {\n          onClick: this.handleListClick,\n          type: \"button\",\n          value: \"list\",\n          list: item,\n          className: \"deleteMovieButton\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 32,\n            columnNumber: 17\n          }\n        }, \" Add to \", item, \" \"));\n      }\n    }\n  }\n\n  handleListClick(e) {\n    let newLists = this.props.json.Lists.concat(e.target.list);\n    var updates = {};\n    updates['movieid/' + this.props.json.imdbID] = newLists;\n    firebase.database().ref(\"movieid/\" + this.props.json.imdbID).update(updates);\n    alert(this.props.json.Title + \" has been added to \" + e.target.list);\n  }\n\n  handleDeleteClick() {\n    let ref = firebase.database().ref(\"movieid\");\n    ref.child(this.props.json.imdbID).remove();\n    alert(this.props.json.Title + \" has been deleted.\");\n  } //Poster, Title, Director, imdbRating\n\n\n  render() {\n    const isOpen = this.state.isOpen;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      className: \"movieBlock\",\n      src: this.props.json.Poster,\n      onClick: () => this.setState({\n        isOpen: true\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 15\n      }\n    }), isOpen && /*#__PURE__*/React.createElement(Lightbox, {\n      mainSrc: this.props.json.Poster,\n      imageTitle: this.props.json.Title,\n      imageCaption: \"Directed by: \" + this.props.json.Director + '   ' + \"|  IMDB Rating: \" + this.props.json.imdbRating,\n      onCloseRequest: () => this.setState({\n        isOpen: false\n      }) //toolbarButtons = {[<button onClick = {this.handleDeleteClick} type = \"button\" value = \"delete\" className = \"deleteMovieButton\"> Delete Movie </button>]}\n      ,\n      toolbarButtons: this.state.toolbarButtons,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 15\n      }\n    }));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/flast/OneDrive/Desktop/mishaobu com/mishaobu.github.io/src/components/MovieBlock.js"],"names":["React","Component","Lightbox","config","firebase","require","MovieBlock","constructor","props","handleDeleteClick","bind","state","data","isOpen","toolbarButtons","componentDidMount","document","getElementsByClassName","onclick","alert","apps","length","initializeApp","item","lists","json","includes","push","handleListClick","e","newLists","Lists","concat","target","list","updates","imdbID","database","ref","update","Title","child","remove","render","Poster","setState","Director","imdbRating"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport Lightbox from 'react-image-lightbox';\r\nimport 'react-image-lightbox/style.css';\r\n\r\nimport config from \"../config\";\r\nconst firebase = require(\"firebase\");\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default class MovieBlock extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleDeleteClick = this.handleDeleteClick.bind(this);\r\n        this.state = { \r\n          data: [],\r\n          isOpen: false,\r\n          toolbarButtons: [<button onClick = {this.handleDeleteClick} type = \"button\" value = \"delete\" className = \"deleteMovieButton\"> Delete Movie </button>]\r\n        };\r\n      }\r\n\r\n      componentDidMount() {\r\n        document.getElementsByClassName('deleteMovieButton').onclick = function() {alert(1)};\r\n        if (!firebase.apps.length) {\r\n            firebase.initializeApp(config)\r\n          } \r\n          for (let item in this.props.lists) {\r\n            if (!(this.props.json.lists.includes(item))) {\r\n              this.state.toolbarButtons.push(\r\n                <button onClick = {this.handleListClick} type = \"button\" value = \"list\" list = {item} className = \"deleteMovieButton\"> Add to {item} </button>\r\n              )\r\n            }\r\n          }\r\n      }\r\n\r\n      handleListClick(e) {\r\n        let newLists = this.props.json.Lists.concat(e.target.list);\r\n        var updates = {}\r\n        updates['movieid/' + this.props.json.imdbID] = newLists;\r\n        firebase.database().ref(\"movieid/\" + this.props.json.imdbID).update(updates);\r\n        alert(this.props.json.Title + \" has been added to \" + e.target.list);\r\n      }\r\n\r\n      handleDeleteClick() {\r\n        let ref = firebase.database().ref(\"movieid\");\r\n        ref.child(this.props.json.imdbID).remove();\r\n        alert(this.props.json.Title + \" has been deleted.\");\r\n      }\r\n\r\n\r\n//Poster, Title, Director, imdbRating\r\n    render() {\r\n       const isOpen = this.state.isOpen;\r\n        return (\r\n            <div>\r\n              <img className = \"movieBlock\" src = {this.props.json.Poster} onClick = {() => this.setState({isOpen: true})}></img>\r\n            {isOpen && (\r\n              <Lightbox mainSrc = {this.props.json.Poster} \r\n               imageTitle = {this.props.json.Title} \r\n               imageCaption = {\"Directed by: \" + this.props.json.Director + '   ' + \"|  IMDB Rating: \" + this.props.json.imdbRating} \r\n               onCloseRequest={() => this.setState({ isOpen: false })}\r\n               //toolbarButtons = {[<button onClick = {this.handleDeleteClick} type = \"button\" value = \"delete\" className = \"deleteMovieButton\"> Delete Movie </button>]}\r\n               toolbarButtons = {this.state.toolbarButtons}\r\n              />\r\n            )}\r\n          </div>\r\n        );\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}