{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\flast\\\\OneDrive\\\\Desktop\\\\mishaobu com\\\\mishaobu.github.io\\\\src\\\\components\\\\MovieOptions.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport config from \"../config\";\n\nconst firebase = require(\"firebase\");\n\nexport default class MovieOptions extends Component {\n  constructor() {\n    super();\n    this.state = {\n      movieid: \"\",\n      time: null,\n      movieRef: null,\n      list: \"\"\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleNewList = this.handleNewList.bind(this);\n  }\n\n  handleChange(e) {\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  } // tt1596363\n\n\n  handleValidation() {\n    if (this.state.movieid === \"\") {\n      alert(\"ID cannot be empty.\");\n    } else if (this.state.movieid.length != 9) {\n      alert(\"ID should be 9 characters.\");\n    } else return true;\n\n    return false;\n  }\n\n  handleNewList(e) {\n    e.preventDefault();\n    const movieRef = firebase.database().ref(\"lists/\" + this.state.list).set(this.state.list).then(() => this.setState({\n      list: \"\"\n    }));\n    alert(\"New list submitted\");\n  } //Poster, Title, Director, imdbRating\n\n\n  handleSubmit(e) {\n    e.preventDefault();\n\n    if (this.handleValidation()) {\n      axios.get('https://www.omdbapi.com/?apikey=fe15e914&i=' + this.state.movieid).then(response => {\n        const movieRef = firebase.database().ref(\"movieid/\" + this.state.movieid);\n        response.data[\"Lists\"] = [];\n        console.log(response.data);\n        setTimeout(() => movieRef.set(response.data));\n      }).then(() => {\n        this.setState({\n          movieid: \"\",\n          time: null\n        });\n      });\n      alert(\"New movie submitted\");\n    }\n  }\n\n  componentDidMount() {\n    if (!firebase.apps.length) {\n      firebase.initializeApp(config);\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 13\n      }\n    }, \"Add Movie\", /*#__PURE__*/React.createElement(\"form\", {\n      className: \"movieAddForm\",\n      onSubmit: this.handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      name: \"movieid\",\n      onChange: this.handleChange,\n      value: this.state.movieid,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }\n    }, \"Make new list\", /*#__PURE__*/React.createElement(\"form\", {\n      className: \"listAddForm\",\n      onSubmit: this.handleNewList,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      name: \"list\",\n      onChange: this.handleChange,\n      value: this.state.list,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 21\n      }\n    }))));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/flast/OneDrive/Desktop/mishaobu com/mishaobu.github.io/src/components/MovieOptions.js"],"names":["React","Component","axios","config","firebase","require","MovieOptions","constructor","state","movieid","time","movieRef","list","handleChange","bind","handleSubmit","handleNewList","e","setState","target","name","value","handleValidation","alert","length","preventDefault","database","ref","set","then","get","response","data","console","log","setTimeout","componentDidMount","apps","initializeApp","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport axios from 'axios';\r\nimport config from \"../config\";\r\n\r\nconst firebase = require(\"firebase\");\r\n\r\n\r\n\r\nexport default class MovieOptions extends Component {\r\n    \r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n          movieid: \"\",\r\n          time: null,\r\n          movieRef: null,\r\n          list: \"\"\r\n        };\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.handleNewList = this.handleNewList.bind(this);\r\n      }\r\n    \r\n      handleChange(e) {\r\n        this.setState({\r\n          [e.target.name]: e.target.value,\r\n        });\r\n      }\r\n\r\n     // tt1596363\r\n      handleValidation() {\r\n        if (this.state.movieid === \"\") {\r\n          alert(\"ID cannot be empty.\");\r\n        } else if (this.state.movieid.length != 9) {\r\n          alert(\"ID should be 9 characters.\");\r\n         } else return true;\r\n        return false;\r\n      }\r\n\r\n      handleNewList(e) {\r\n        e.preventDefault();\r\n        const movieRef = firebase.database().ref(\"lists/\" + this.state.list).set(this.state.list)\r\n            .then(() => this.setState({list: \"\"})\r\n        );\r\n        alert(\"New list submitted\");\r\n      }\r\n    \r\n\r\n\r\n\r\n    //Poster, Title, Director, imdbRating\r\n\r\n\r\n      handleSubmit(e) {\r\n        e.preventDefault();\r\n        if (this.handleValidation()) {\r\n          axios.get('https://www.omdbapi.com/?apikey=fe15e914&i=' + this.state.movieid)\r\n            .then(response => {\r\n                const movieRef = firebase.database().ref(\"movieid/\" + this.state.movieid);\r\n                response.data[\"Lists\"] = []\r\n                console.log(response.data);\r\n                setTimeout(() => movieRef.set(response.data) );\r\n            }).then(() => {\r\n                this.setState({\r\n                    movieid: \"\",\r\n                    time: null,\r\n                  });\r\n            })\r\n          alert(\"New movie submitted\");\r\n        }\r\n      }\r\n\r\n      componentDidMount() {\r\n        if (!firebase.apps.length) {\r\n            firebase.initializeApp(config)\r\n         } \r\n      }\r\n    \r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                Add Movie\r\n                <form className = \"movieAddForm\" onSubmit = {this.handleSubmit}>\r\n                    <input\r\n                        type=\"text\" \r\n                        name=\"movieid\"\r\n                        onChange={this.handleChange}\r\n                        value={this.state.movieid}\r\n                    />\r\n                </form>\r\n                <div>\r\n                Make new list\r\n                <form className = \"listAddForm\" onSubmit = {this.handleNewList}>\r\n                    <input type = \"text\" name = \"list\"\r\n                        onChange= {this.handleChange}\r\n                        value = {this.state.list}\r\n                    />\r\n                </form>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}